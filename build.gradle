//buildscript {
//    dependencies {
//        classpath "io.spring.gradle:dependency-management-plugin:1.1.0"
//    }
//}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.8' apply false
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}


allprojects { // 모든 프로젝트에 반영되는 부분
    repositories {
        mavenCentral()
    }
}

def javaProjects = [ // Java 로 작성된 소스코드에 대한 공통작업 선언
     project(":readit-api"),
     project(":readit-domain"),
     project(":readit-common"),
]

configure(javaProjects) {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    group = "${projectGroup}"
    version = "${projectVersion}-${new Date().format('yyyyMMddHHmmss')}"

    sourceCompatibility = 17
    targetCompatibility = 17

    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    test {
        reports {
            junitXml.required = true
            html.required = true
        }
        jacoco {
            enabled = true
            destinationFile = file("${buildDir}/jacoco/jacoco.exec")
        }
        finalizedBy jacocoTestReport

        useJUnitPlatform { //jUnit5 수행
            excludeTags("integrationTest")
        }
    }

    /**
     * @see <a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html">Build Script Basics</a>
     */
    tasks.register("integrationTest", Test) {
        useJUnitPlatform {
            includeTags("integration")
        }
        finalizedBy "jacocoTestReport"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.setDestination(file("${buildDir}/reports/jacoco/html"))
        }
        getExecutionData().setFrom(files("${buildDir}/jacoco/jacoco.exec"))
    }
}

def querydslProjects = [
        project(":readit-domain"),
        project(":readit-api")
]
configure(querydslProjects) {
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")

        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }
}


//subprojects {
//    compileJava {
//        sourceCompatibility = 17
//        targetCompatibility = 17
//    }
//    apply plugin: 'java'
//    apply plugin: 'java-library'
//    apply plugin: 'org.springframework.boot'
//    apply plugin: 'io.spring.dependency-management'
//
//    repositories {
//        mavenCentral()
//    }
//
//    dependencies {
//        compileOnly 'org.projectlombok:lombok'
//        annotationProcessor 'org.projectlombok:lombok'
//        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//        testImplementation 'com.tngtech.archunit:archunit:1.0.1'
//        testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        implementation 'org.jetbrains:annotations:23.0.0'
//    }
//
//    tasks.named('test') {
//        useJUnitPlatform()
//    }
//
//}
//
//bootRun {
//    enabled = false
//}
//
//bootJar {
//    enabled = false
//}
//
//bootBuildImage{
//    enabled = false
//}
